import numpy as np

# Helper functions for matrix addition and subtraction
def matrix_addition(A, B):
    return A + B

def matrix_subtraction(A, B):
    return A - B

# Regular matrix multiplication for base case
def base_multiply(A, B):
    return np.dot(A, B)

# Strassen's matrix multiplication function
def strassen(A, B):
    original_n = A.shape[0]  # Store the original size
    original_m = B.shape[1]  # Store the original size

    n = A.shape[0]

    # Base case: use regular multiplication for small matrices
    if n <= 2:
        return base_multiply(A, B)

    # If n is not a power of 2, pad the matrices with zeros to make them a power of 2
    next_power_of_2 = 2 ** int(np.ceil(np.log2(n)))
    if n != next_power_of_2:
        A_padded = np.zeros((next_power_of_2, next_power_of_2), dtype=A.dtype)
        B_padded = np.zeros((next_power_of_2, next_power_of_2), dtype=B.dtype)
        A_padded[:n, :n] = A
        B_padded[:n, :n] = B
        A, B = A_padded, B_padded
        n = next_power_of_2

    # Split matrices into quadrants
    half = n // 2
    A11, A12, A21, A22 = A[:half, :half], A[:half, half:], A[half:, :half], A[half:, half:]
    B11, B12, B21, B22 = B[:half, :half], B[:half, half:], B[half:, :half], B[half:, half:]

    # Strassen's 7 recursive steps
    M1 = strassen(matrix_addition(A11, A22), matrix_addition(B11, B22))
    M2 = strassen(matrix_addition(A21, A22), B11)
    M3 = strassen(A11, matrix_subtraction(B12, B22))
    M4 = strassen(A22, matrix_subtraction(B21, B11))
    M5 = strassen(matrix_addition(A11, A12), B22)
    M6 = strassen(matrix_subtraction(A21, A11), matrix_addition(B11, B12))
    M7 = strassen(matrix_subtraction(A12, A22), matrix_addition(B21, B22))

    # Calculate the submatrices of the result
    C11 = matrix_addition(matrix_subtraction(matrix_addition(M1, M4), M5), M7)
    C12 = matrix_addition(M3, M5)
    C21 = matrix_addition(M2, M4)
    C22 = matrix_addition(matrix_subtraction(matrix_addition(M1, M3), M2), M6)

    # Combine the submatrices into the result matrix
    C = np.vstack((np.hstack((C11, C12)), np.hstack((C21, C22))))

    # Crop the result back to the original dimensions of the input matrices
    return C[:original_n, :original_m]

# Main function to test the implementation
def main():
    # Define the matrices (10x10 as per your example)
    A = np.array([
        [225, 200, 165, 120, 165, 200, 225, 240, 245, 240],
        [240, 225, 200, 165, 120, 165, 200, 225, 240, 245],
        [245, 240, 225, 200, 165, 120, 165, 200, 225, 240],
        [240, 245, 240, 225, 200, 165, 120, 165, 200, 225],
        [225, 240, 245, 240, 225, 200, 165, 120, 165, 200],
        [200, 225, 240, 245, 240, 225, 200, 165, 120, 165],
        [165, 200, 225, 240, 245, 240, 225, 200, 165, 120],
        [120, 156, 192, 218, 234, 240, 236, 222, 198, 164],
        [165, 120, 165, 200, 225, 240, 245, 240, 225, 200],
        [200, 165, 120, 165, 200, 225, 240, 245, 240, 225]
    ])

    B = np.array([
        [225, 200, 165, 120, 165, 200, 225, 240, 245, 240],
        [240, 225, 200, 165, 120, 165, 200, 225, 240, 245],
        [245, 240, 225, 200, 165, 120, 165, 200, 225, 240],
        [240, 245, 240, 225, 200, 165, 120, 165, 200, 225],
        [225, 240, 245, 240, 225, 200, 165, 120, 165, 200],
        [200, 225, 240, 245, 240, 225, 200, 165, 120, 165],
        [165, 200, 225, 240, 245, 240, 225, 200, 165, 120],
        [120, 156, 192, 218, 234, 240, 236, 222, 198, 164],
        [165, 120, 165, 200, 225, 240, 245, 240, 225, 200],
        [200, 165, 120, 165, 200, 225, 240, 245, 240, 225]
    ])

    print("Matrix 1:")
    print(A)
    print("Matrix 2:")
    print(B)

    # Perform Strassenâ€™s matrix multiplication
    result = strassen(A, B)

    # Print the result
    print("Result of Strassen's Matrix Multiplication:")
    print(result)

    # Verify the result using standard multiplication
    expected = np.dot(A, B)
    print("Expected Result using NumPy dot:")
    print(expected)

    # Check for correctness
    if np.allclose(result, expected):
        print("Strassen's multiplication is correct.")
    else:
        print("Strassen's multiplication is incorrect.")

if __name__ == "__main__":
    main()
